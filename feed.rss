<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>/</link>
		<description />
		<copyright>Copyright © 2021</copyright>
		<pubDate>Thu, 25 Mar 2021 01:01:14 GMT</pubDate>
		<lastBuildDate>Thu, 25 Mar 2021 01:01:14 GMT</lastBuildDate>
		<item>
			<title>Repository Pattern - Part 1</title>
			<link>/posts/repository-parttern-part1</link>
			<description>&lt;p&gt;Recently, I had this &lt;a href="https://twitter.com/qudooschaudhry/status/1372643561204748294"&gt;conversation&lt;/a&gt; on twitter regarding The Respository Pattern.&lt;/p&gt;</description>
			<guid isPermaLink="false">/posts/repository-parttern-part1</guid>
			<pubDate>Wed, 24 Mar 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Recently, I had this &lt;a href="https://twitter.com/qudooschaudhry/status/1372643561204748294"&gt;conversation&lt;/a&gt; on twitter regarding The Respository Pattern.&lt;/p&gt;
&lt;p&gt;&lt;img src="/tweet_repo.png" alt="Tweet Repo"&gt;&lt;/p&gt;
&lt;p&gt;I know, my response is a little cheeky. A better answer would have been "it depends" ;)&lt;/p&gt;
&lt;p&gt;I think there are times when it makes sense and there is a lot of material out there talking in favour of or against the repository pattern. I also wanted to document my thoughts in the form of a post. So, let's dive in.&lt;/p&gt;
&lt;h2 id="what-is-the-repository-pattern"&gt;What is the Repository Pattern?&lt;/h2&gt;
&lt;p&gt;As awlays, Martin Fowler has a good quick &lt;a href="https://martinfowler.com/eaaCatalog/repository.html"&gt;explanation&lt;/a&gt; on the PEAA catalog. That first line&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mediates between the domain and data mapping layers using a collection-like interface for accessing domain objects.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;pretty much sums it up. As far as my knowledge is concerened, I think the pattern gained a popularity after the famous &lt;a href="https://www.domainlanguage.com/ddd/"&gt;DDD blue book&lt;/a&gt;. In his book, Evans describes the repository like so&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;For each type of object that needs global access, create an object that can provide the
illusion of an in-memory collection of all objects of that type. Set up access through a
well-known global interface. Provide methods to add and remove objects, which will
encapsulate the actual insertion or removal of data in the data store. Provide methods
that select objects based on some criteria and return fully instantiated objects or
collections of objects whose attribute values meet the criteria, thereby encapsulating
the actual storage and query technology. Provide REPOSITORIES only for AGGREGATE roots
that actually need direct access. Keep the client focused on the model, delegating all
object storage and access to the REPOSITORIES.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This makes a lot of sense. Keep data access and storage capabilities away from the domain model, and let the domain model handle the business requirements. As someone who has been practicing DDD for quite sometime, I cannot agree more with this and the separation that it provides in our codebases. However, I think if we are using a decent ORM, building a repository on top of that comes with some problems and I want to highlight those here.&lt;/p&gt;
&lt;h2 id="the-domain"&gt;The Domain :)&lt;/h2&gt;
&lt;p&gt;I have picked a simple but realistic domain. Not your everyday blog or todo list. ;)&lt;/p&gt;
&lt;p&gt;Today we are working with e-learning system. Specifically, a learning management system that acts as a backoffice application to manage course content. The team has worked hard to understand some of the requirements and have identified some entities within the system namely;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Course&lt;/li&gt;
&lt;li&gt;Chapter&lt;/li&gt;
&lt;li&gt;Page&lt;/li&gt;
&lt;li&gt;Section&lt;/li&gt;
&lt;li&gt;SectionType&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Our team is new to DDD. While we have tried hard to not think about the underlying database, we cannot help it that an RDBMS is going to be holding the state of our domain objects. Some of our relational thinking has naturally seeped into our design, for instance, a &lt;em&gt;Course&lt;/em&gt; has &lt;em&gt;Chapters&lt;/em&gt; which has &lt;em&gt;Pages&lt;/em&gt;, which in turn can have multiple &lt;em&gt;Sections&lt;/em&gt;. After days of discussions, we have come to the conclusion that Course is the &lt;em&gt;aggregate root&lt;/em&gt; in this context.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Side note: some of this can be deemed as bikeshedding. DDD encourages continual learning of our domain and adjust as we discover new things. Nothing will be right the first day, but since we lock ourselves into underlying technologies because that is all we know or how we have always done things, we end up trying to make these decisions upfront, which in some cases are not trivial.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id="requirements-for-version-1"&gt;Requirements for version 1&lt;/h2&gt;
&lt;p&gt;Here are the highlevel requirements for version 1.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As a course designer, I need to be able to see the list of all course.&lt;/li&gt;
&lt;li&gt;As a course designer, I need to be able to select a course and edit it's properties.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="project-structure-and-running-the-project"&gt;Project Structure and running the project&lt;/h2&gt;
&lt;p&gt;The project is located at my &lt;a href="https://github.com/qudooschaudhry/RepositoryPattern/tree/part1"&gt;github&lt;/a&gt; in the branch called part1.&lt;/p&gt;
&lt;p&gt;The project follows the popular (and notorious) clean architecture style. I chose it for familiarity and kept it the way most people implement it i.e. technology structured as opposed to feature structured. So the main projects are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;LMS.UI - asp.net mvc project (controllers and views)&lt;/li&gt;
&lt;li&gt;LMS.Infrastructure&lt;/li&gt;
&lt;li&gt;LMS.Domain&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I skipped an application layer because I am trying to focus only on the repository layer, so the repositories are injected into the controllers.&lt;/p&gt;
&lt;p&gt;The project is built on .net 5.0 and uses &lt;code&gt;docker-compose&lt;/code&gt; to bring up a sql server instance. I have not had much luck with docker-compose so I usually do a &lt;code&gt;docker pull microsoft/mssql-server-windows-developer&lt;/code&gt; first.&lt;/p&gt;
&lt;p&gt;Should be able to run the project via F5. Once the migration has run you should be able to use SSMS to connect to the SQL Server at localhost,51433. SA password is in docker compose file. There is a script in the scripts folder to populate with some course data.&lt;/p&gt;
&lt;p&gt;Browsing to /courses should give you a list of course and clicking on a course should bring you to an edit form.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Index&lt;/code&gt; view on the &lt;code&gt;CoursesController&lt;/code&gt; uses the repository to load all course&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C"&gt; public async Task&amp;lt;IActionResult&amp;gt; Index(CancellationToken cancellationToken)
{
    var courses = await _courseRepository.GetAll(cancellationToken);
            
    return View(courses.Select(c =&amp;gt; new CourseItemModel() 
    { 
        Id = c.Id,
        Name = c.Name,
        Startdate = c.StartDate,
        EndDate = c.EndDate
    }));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;CourseRepository&lt;/code&gt; uses the EF data context to perform the required operations&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;public async Task&amp;lt;IEnumerable&amp;lt;Course&amp;gt;&amp;gt; GetAll(CancellationToken cancellationToken)
{
    await Task.Delay(0, cancellationToken);
    return _context.Courses.ToList();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have tried to keep the repository layer as simple as possible and not have any other noise code so it is easier to follow along.&lt;/p&gt;
&lt;p&gt;Download the code and debug through it, or read it on github. That's it for part 1. In subsequent parts, I will be adding more funcitonality to the LMS and show how the repository pattern will start to become a problem as the code continues to grow.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
&lt;p&gt;~Q&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>A unit testing Example</title>
			<link>/posts/a-unit-testing-example</link>
			<description>&lt;p&gt;Whether you are in the TDD camp or not, It goes without saying that unit testing is a very powerful way to ensure that your code is supposed to do what it is supposed to do. I never really got into TDD because by the time I had started to learn about it, I had already started to learn other patterns and techniques to design a losely coupled application. Afterall, the biggest benefit of TDD seems to be design. Regardles of the approach, testing our code is just a core part of software development.&lt;/p&gt;</description>
			<guid isPermaLink="false">/posts/a-unit-testing-example</guid>
			<pubDate>Fri, 12 Mar 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Whether you are in the TDD camp or not, It goes without saying that unit testing is a very powerful way to ensure that your code is supposed to do what it is supposed to do. I never really got into TDD because by the time I had started to learn about it, I had already started to learn other patterns and techniques to design a losely coupled application. Afterall, the biggest benefit of TDD seems to be design. Regardles of the approach, testing our code is just a core part of software development.&lt;/p&gt;
&lt;p&gt;When talking about testing, two of ways that come up are the arrange/act/asert and the behaviour driven design style. In arrange/act/assert, you arrange your test, act upon the system under test and the make assertions about the result. While BDD style tests are written in the gherkin language style, popularized by the &lt;a href="https://cucumber.io/docs/gherkin/"&gt;Cucumber framework&lt;/a&gt;. It provides a more contextual way of testing with the Given/When/Then style of unit tests. &lt;a href="https://specflow.org/"&gt;Specflow&lt;/a&gt; is a very popular framework within the .net world. I am in love with specflow. :).&lt;/p&gt;
&lt;p&gt;However, nothing is free. BDD style tests and Specflow in general can be a little bit of a high maintenance. Especially, if you are learning the tools as you go. Many developers will completely dismiss them stating requiring too much effort to write and maintain. While, I think some of it has to do with lack of knowledge and experience with the tool, I do think they require a little bit of extra work to be able to setup and continue using.&lt;/p&gt;
&lt;p&gt;Even when I cannot use a tool like Specflow, I have come to write a little simpler form of BDD tests which are a little better than just arrange/act/assert and more lightweight than full on Specflow and here I will show an example of that.&lt;/p&gt;
&lt;h1 id="domain"&gt;Domain&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/qudooschaudhry/UnitTestExample"&gt;TLDR; just show me the code&lt;/a&gt;. &lt;strong&gt;sample code, don't use in production :)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I have picked a simple scenario for the example. Users in my application need to be able to login to it and use the application. If users login attempts continue to fail, I want to know if they are lockedout if they exceed the threshold within a given amount of time. Simple, yes? :)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: Don't build  an authentication system if building authentication systems is not your core competency.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;My model is very simple with an &lt;code&gt;Account&lt;/code&gt; domain object having two methods &lt;code&gt;Login&lt;/code&gt; and &lt;code&gt;IsLockedOut&lt;/code&gt;. If you have seen enough unit testing projects, you will have seen the test organized like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;
public class AccountTests
{
    [Test]
    public void can_login()
    {
        //arrange
        //act
        /assert
    }

    [Test] 
    public void can_determine_if_account_is_locked() 
    {
        //arrange
        //act
        /assert
    }
    .
    .
    .
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is fine, but as the Account model grows in functionality, this one class to have all the tests becomes quite hard to maintain. Some teams will use &lt;code&gt;regions&lt;/code&gt; to separate the tests related to a certain method as well. It works, but it does not give a good enough visibility into what is being tested.&lt;/p&gt;
&lt;h1 id="a-givenwhenthen-style-of-unit-test"&gt;A Given/When/Then Style of Unit Test&lt;/h1&gt;
&lt;p&gt;I like to use a base class in my testing project called &lt;code&gt;SpecificationBase&lt;/code&gt; and this is the code it has&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt; public abstract class SpecificationBase
    {
        protected virtual void Given() { }
        protected virtual void When() { }
        
        public SpecificationBase()
        {
            Given();
            When();
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And each test I write just inherits from this. Each Test can override the &lt;code&gt;Given&lt;/code&gt; method to &lt;code&gt;arrange&lt;/code&gt; whatever setup needs to be required for the given test. &lt;code&gt;When&lt;/code&gt; is overridden to perform the &lt;code&gt;act&lt;/code&gt; on the system under test. Then each Test can have one or mutliple Tests which start with &lt;code&gt;Then&lt;/code&gt; and describe what should happen in this case. I also use a little  partial class and inheritance magic for the tests to display very nicely in a test explorer for instance they would show like this in visual studio&lt;/p&gt;
&lt;p&gt;&lt;img src="/unittest.png" alt="Unittest"&gt;&lt;/p&gt;
&lt;p&gt;As you can see, instead of lumping all the unit tests of the Account model into one large unit test class, I treat each method within that model to be a testable unit and build the testing language around that. These can be within the same file or they can be separated out in which case they do display all together in solution explorer.&lt;/p&gt;
&lt;p&gt;I have found this method to be a happy medium between the typical arrange/act/assert and the full on BDD style of unit tests and has worked very well for me. It requires a little bit of extra work but the unit tests become very explicit and easy to manage.&lt;/p&gt;
&lt;p&gt;Happy coding and unit testing!&lt;/p&gt;
&lt;p&gt;~Q&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>ASP.NET Web API Multi-Auth</title>
			<link>/posts/web-api-multi-auth</link>
			<description>&lt;p&gt;We are building an application that is to be used by our customers, but also some internal folks at our company. Since we are on office 365, we thought it made sense to have our internal team login using office 365. The external clients were setup using asp.net Identity aka local accounts.&lt;/p&gt;</description>
			<guid isPermaLink="false">/posts/web-api-multi-auth</guid>
			<pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;We are building an application that is to be used by our customers, but also some internal folks at our company. Since we are on office 365, we thought it made sense to have our internal team login using office 365. The external clients were setup using asp.net Identity aka local accounts.&lt;/p&gt;
&lt;p&gt;Seting up the multiple authorizations is quite easy as it all happens inside the startup pipeline through the use of middleware. The Microsoft Identity platform has a very handy extension method for setting that up.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;services.AddAuthentication().AddMicrosoftIdentityWebApi(Configuration, &amp;quot;AzureAd&amp;quot;, &amp;quot;AzureAd&amp;quot;);`
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second parmeter is the key of the configuration item in the &lt;code&gt;appsettings.json&lt;/code&gt; like so&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;&amp;quot;AzureAd&amp;quot;: {
    &amp;quot;Instance&amp;quot;: &amp;quot;https://login.microsoftonline.com/&amp;quot;,
    &amp;quot;Tenant&amp;quot;: &amp;quot;&amp;lt;your tenant name&amp;gt;&amp;quot;,
    &amp;quot;Audience&amp;quot;: &amp;quot;&amp;lt;the client id of the registered application within Azure&amp;gt;&amp;quot;,
    &amp;quot;TenantId&amp;quot;: &amp;quot;&amp;lt;your tenante id&amp;gt;&amp;quot;,
    &amp;quot;ClientId&amp;quot;: &amp;quot;&amp;lt;the client id of the registered application within Azure&amp;gt;&amp;quot;,
    &amp;quot;CallbackPath&amp;quot;: &amp;quot;/signin-oidc&amp;quot;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The third parameter is a name you give to this authentication scheme, which can later be utilized on the controllers or actions like so&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;    [Route(&amp;quot;[controller]&amp;quot;), ApiController, Authorize(AuthenticationSchemes = &amp;quot;AzureAd&amp;quot;)]
    public class MyController : BaseController
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;for the local accounts, I was so inspired by the clean one line setup of the &lt;code&gt;AddMicrosoftIdentityWebApi extension&lt;/code&gt; method that I added my own in the same way&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;    services.AddLocalAuthorization(Configuration);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then I added my extension class like so&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;
public static class AuthenticationExtensions
    {
        public static IServiceCollection AddLocalAuthorization(
            this IServiceCollection serviceCollection,
            IConfiguration configuration)
        {
            serviceCollection
                .AddAuthorization(options =&amp;gt;
                {
                    options.AddLocalAuthPolicy();
                })
                .AddAuthentication(&amp;quot;LocalAccountsScheme&amp;quot;)
                .AddJwtBearer(&amp;quot;LocalAccountsScheme&amp;quot;,
                    options =&amp;gt;
                    {
                        options.TokenValidationParameters = new TokenValidationParameters()
                        {
                            ValidateIssuer = true,
                            ValidIssuer = configuration.GetSection(&amp;quot;TokenConfiguration&amp;quot;)[&amp;quot;Issuer&amp;quot;],
                            ValidateAudience = true,
                            ValidAudience = configuration.GetSection(&amp;quot;TokenConfiguration&amp;quot;)[&amp;quot;Audience&amp;quot;],
                            ValidateIssuerSigningKey = true,
                            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration.GetSection(&amp;quot;TokenConfiguration&amp;quot;)[&amp;quot;SecretKey&amp;quot;]))
                        };
                    });

            return serviceCollection;
        }

        private static AuthorizationOptions AddLocalAuthPolicy(this AuthorizationOptions options)
        {
            var policy = new AuthorizationPolicyBuilder()
                .AddAuthenticationSchemes(&amp;quot;LocalAccountsScheme&amp;quot;)
                .RequireAuthenticatedUser()
                .Build();

            options.AddPolicy(&amp;quot;LocalAccountsPolicy&amp;quot;, policy);
            return options;
        }
    }

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and then the controllers are decorated the same way&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c"&gt;    [Route(&amp;quot;[controller]&amp;quot;), ApiController, Authorize(AuthenticationSchemes = &amp;quot;LocalAccountsScheme&amp;quot;)]
    public class MyController : BaseController
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, when the Bearer token is passed from the UI, the appropriate mechanism to validate the token is used based on the authentication scheme on the controller.&lt;/p&gt;
&lt;p&gt;One thing to remember when registering the application in Azure AD is to ensure it is setup as a SPA application and issues Id_Tokens. Without that, the UI application will not be able to get the JWT tokens from Azure AD.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
&lt;p&gt;~Q&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Blazor WASM Application Settings</title>
			<link>/posts/blazor-wasm-appsettings</link>
			<description>&lt;p&gt;Recently, we had an opportunity to build a brand new application for a subset of our customers. It seemed like a perfect opportunity to try Blazor in a production setting as the application was not going to be too large (famous last words:)).&lt;/p&gt;</description>
			<guid isPermaLink="false">/posts/blazor-wasm-appsettings</guid>
			<pubDate>Fri, 05 Mar 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Recently, we had an opportunity to build a brand new application for a subset of our customers. It seemed like a perfect opportunity to try Blazor in a production setting as the application was not going to be too large (famous last words:)).&lt;/p&gt;
&lt;p&gt;One of the things we had to figure out was how to determine environments within the Blazor Web Assembly application. The Blazor Web Assemlby project supports &lt;code&gt;appsettings.json&lt;/code&gt; files, which has to be created in the wwwroot folder inside the WASM project. When a request comes into the application, the appsettings.json file is sent as part of the first package that gets downloaded.&lt;/p&gt;
&lt;p&gt;&lt;img src="/file.png" alt="File"&gt;&lt;/p&gt;
&lt;p&gt;We had to figure out how to push the &lt;code&gt;appsettings.DEV.json&lt;/code&gt; and &lt;code&gt;appsettings.PRD.json&lt;/code&gt; files from our various environments. These files can have things like the environment specific API Url.&lt;/p&gt;
&lt;p&gt;By default, when we publish a WASM project, it generates a web.config inside the output folder, which has a bunch of things that allow for the WASM application to be served correctly. To setup the correct environment, we have to send a custom header named &lt;code&gt;blazor-environment&lt;/code&gt;. The WASM application then uses this to determine which &lt;code&gt;appsettings&lt;/code&gt; file to use.&lt;/p&gt;
&lt;p&gt;For instance in our case we ended up adding this to the generated web.config file during our publish process&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;httpProtocol&amp;gt;
    &amp;lt;customHeaders&amp;gt;
        &amp;lt;add name="blazor-environment" value="DEV" /&amp;gt;
    &amp;lt;/customHeaders&amp;gt;
&amp;lt;/httpProtocol&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we add this, the appropriate &lt;code&gt;appsettings&lt;/code&gt; file is also pushed with the first download.&lt;/p&gt;
&lt;p&gt;&lt;img src="/file2.png" alt="File2"&gt;&lt;/p&gt;
&lt;p&gt;We added the default web.config into our WASM project and also added the specific &lt;code&gt;web.DEV.config&lt;/code&gt; and &lt;code&gt;web.PRD.config&lt;/code&gt;. We also updated the WASM csproj file to have the following target added and utilized the &lt;code&gt;Microsoft.DotNet.Xdt.Tools&lt;/code&gt; nuget package to perform our config transforms. We just had to edit our WASM csproj file like so.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Target Name="ApplyXdtConfigTransform" BeforeTargets="_TransformWebConfig"&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
      &amp;lt;_SourceWebConfig&amp;gt;$(MSBuildThisFileDirectory)Web.config&amp;lt;/_SourceWebConfig&amp;gt;
      &amp;lt;_XdtTransform&amp;gt;$(MSBuildThisFileDirectory)Web.$(Configuration).config&amp;lt;/_XdtTransform&amp;gt;
      &amp;lt;_TargetWebConfig&amp;gt;$(PublishDir)Web.config&amp;lt;/_TargetWebConfig&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;
    &amp;lt;Exec Command="dotnet xdt --source &amp;amp;quot;$(_SourceWebConfig)&amp;amp;quot; --transform &amp;amp;quot;$(_XdtTransform)&amp;amp;quot; --output &amp;amp;quot;$(_TargetWebConfig)&amp;amp;quot;" Condition="Exists('$(_XdtTransform)')" /&amp;gt;
  &amp;lt;/Target&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...and that is pretty much it.&lt;/p&gt;
&lt;p&gt;Happy coding.&lt;/p&gt;
&lt;p&gt;~Q&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>